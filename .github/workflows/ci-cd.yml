name: Java CI/CD Pipeline

# Trigger on push or pull request to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Create lib directory and download JUnit dependencies
    - name: Download JUnit Dependencies
      run: |
        mkdir -p lib
        curl -L -o lib/junit-api.jar https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter-api/5.10.0/junit-jupiter-api-5.10.0.jar
        curl -L -o lib/junit-engine.jar https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.10.0/junit-jupiter-engine-5.10.0.jar
        curl -L -o lib/platform.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.10.0/junit-platform-console-standalone-1.10.0.jar
        curl -L -o lib/hamcrest.jar https://repo1.maven.org/maven2/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar
        ls -l lib/  # Verify downloads
        echo "JUnit dependencies downloaded"

    # Step 4: Compile with JUnit in classpath
    - name: Compile
      run: |
        mkdir -p classes
        javac -cp "lib/junit-api.jar:lib/junit-engine.jar:lib/platform.jar:lib/hamcrest.jar" -d classes *.java
        ls -l classes/  # Verify compilation
        echo "Build successful!"

    # Step 5: Run Tests
    - name: Run Tests
      run: |
        java -cp "classes:lib/junit-api.jar:lib/junit-engine.jar:lib/platform.jar:lib/hamcrest.jar" org.junit.platform.console.ConsoleLauncher --select-class MathUtilsTest
      continue-on-error: false

    # Step 6: Create JAR
    - name: Create JAR
      run: |
        cd classes
        jar cf ../myapp.jar *
        echo "JAR created"

    # Step 7: Upload JAR
    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: myapp-jar
        path: myapp.jar

    # Step 8: Simulate Deploy
    - name: Simulate Deploy
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to staging..."
